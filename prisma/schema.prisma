// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// Start of generic user linkage

model UserLink {
    // A kol account will only ever be linked to one discord account
    kolId     String @id @unique // The kol user ID ingame
    // But there is no limit on how many kol accounts link to the same discord
    discordId String // The discord user ID
}

// End of generic user linkage

// Start of Discord Chat Relay
// This has nothing to do with status logging

model GameChannel {
    name   String  @id // The name of this channel, no slash. So "games", "clan", etc
    public Boolean // Is this channel public, or private (clan, hobo, dread, etc)
}

model DiscordChannel {
    id      Int    @id @default(autoincrement())
    server  String
    channel String

    @@unique([server, channel])
}

model ChannelLink {
    id        Int    @id @default(autoincrement())
    game      String // The name of the channel, references @GameChannel
    discord   Int // References a discord channel entry
    direction Int // 0 for no direction, 1 for game -> discord, 2 for discord -> game, 3 for game <-> discord. Aka both ways.
}

// End of Discord Chat Relay

// Start of Discord Chat Logging

model LoggingTarget {
    id          Int     @id @default(autoincrement())
    player      Int // Owning player ID
    identifier  String // The default is 'default'. Can be changed to define which target is used.
    target      String // Target Type. `webhook`, `channel`, `dm`
    targetData  String // `Webhook url`, `server:channel`, `numeric discord user id`
    displayname String? // If set, will try to post the message with this username
    avatar      String? // If set, will try to post the message with this avatar
    created     Int // Gameday created
    lastUse     Int // Gameday last used
    uses        Int // Incrementing counter
}

// When its a message that will be edited
model LoggingEditor {
    id         Int     @id @default(autoincrement())
    player     Int // Owning player ID
    name       String // The name of the identifier by player
    identifier String // The generated identifier
    created    Int // When this was created
    lastUse    Int // When was this last used
    melting    Boolean // If this is removed on a new gameday

    @@unique([player, name])
}

// End of Discord Chat Logging
